{"version":3,"sources":["components/Digit/constants.ts","utils/conversion.ts","utils/expression.ts","utils/dev.ts","components/Digit/index.tsx","components/Display/index.tsx","components/Legend/index.tsx","components/Help/index.tsx","components/Calculator/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MAPPING_CHAR_TO_CODE","I","P","MAPPING_CODE_TO_CHAR","MAPPING_CHAR_TO_CODE_LIST","reversedMapping","Object","keys","forEach","code","char","push","getMappingCharToCodeList","SVG_ELEMENTS","tag","d","cx","cy","r","getCodeFromDigit","digit","c","length","charAt","getDigitFromCode","getCodeFromStrokes","strokes","map","stroke","join","areStrokesValid","VALID_COMMAND","parseExpression","expression","value","evaluate","parseFloat","format","checkExpression","replace","command","find","validCommand","endsWith","isDev","decodeURI","window","location","search","includes","Digit","setCode","useState","split","getStrokesFromCode","setStrokes","getStrokeAt","index","onClick","event","strokeIndex","parseInt","target","dataset","newStroke","newStrokes","s","i","className","xmlns","viewBox","fillRule","elem","attrs","status","props","key","String","getInitialCodes","isNaN","concat","Array","fill","getInitDigits","Display","answerValue","setExpression","codes","setCodes","ref","useRef","useEffect","current","scrollLeft","newCode","newCodes","setCodeAt","Legend","Help","Calculator","NaN","answer","setAnswer","setKey","isShowingHelp","setIsShowingHelp","answerRef","displayAnswer","clear","console","log","Date","now","newAnswer","error","role","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54594c98.chunk.js","sourcesContent":["/**\n * ```txt\n * ---0--- --1----\n * |  \\   |   /  |\n * 2   3  4  5   6\n * |    \\ | /    |\n * ---7--- ---8---\n * |    / | \\    |\n * 9  10  11 12 13\n * | /    |   \\  |\n * ---14-- --15---  16\n * ```\n */\n\nexport const MAPPING_CHAR_TO_CODE: Record<string, string> = {\n  '0': '11100010010001110',\n  '1': '00000010000001000',\n  '2': '11000011110000110',\n  '3': '11000011100001110',\n  '4': '00100011100001000',\n  '5': '11100001100001110',\n  '6': '11100001110001110',\n  '7': '11000010000001000',\n  '8': '11100011110001110',\n  '9': '11100011100001110',\n  '.': '00000000000000001',\n  '+': '00001001100100000',\n  '-': '00000001100000000',\n  '*': '00010100001010000',\n  '/': '00000100001000000',\n  '(': '00000100000010000',\n  ')': '00010000001000000',\n\n  I: '11001000000100110',\n  P: '11100011110000000',\n\n  '': '00000000000000000'\n};\n\nexport const MAPPING_CODE_TO_CHAR: Record<string, string> = {\n  '11100010010001110': '0',\n  '10101000010100100': '0', // half 0 on left\n  '01001010000101010': '0', // half 0 on right\n  '10101001000000000': '0', // quarter 0 on upper left\n  '01001010100000000': '0', // quarter 0 on upper right\n  '00000001010100100': '0', // quarter 0 on lower left\n  '00000000100101010': '0', // quarter 0 on lower right\n\n  '00000010000001000': '1', // right 1\n  '00001000000100000': '1', // middle 1\n  '00100000010000000': '1', // left 1\n  '10001000000100110': '1', // fancy 1 with top and bottom bar\n  '00000110000001000': '1', // Less fancy 1 with diagonal line\n  '00100000000000000': '1', // Small 1 on upper left\n  '00001000000000000': '1', // Small 1 on upper center\n  '00000010000000000': '1', // Small 1 on upper right\n  '00000000010000000': '1', // Small 1 on lower left\n  '00000000000100000': '1', // Small 1 on lower center\n  '00000000000001000': '1', // Small 1 on lower right\n\n  '11000011110000110': '2',\n  '11000100001000110': '2', // Z\n  '10001001010000100': '2', // half 2 on left\n  '01000010100100010': '2', // half 2 on right\n  '01000100100000000': '2', // half z on upper right\n  '00000001001000100': '2', // half z on lower right\n\n  '11000011100001110': '3', // ∃\n  '11000100100001110': '3', // ㇋\n  '11000100000010110': '3', // flipped ∑\n  '10001001000100100': '3', // half 3 on left\n  '01000010100001010': '3', // half 3 on right\n  '11000010100001110': '3', // ∃ with shorter center bar\n\n  '00100011100001000': '4',\n  '00001010100001000': '4', // right 丩\n  '00101001000100000': '4', // left 丩\n  '00000110100001000': '4', // right 4 with ⊿\n  '00101001100100000': '4', // 4 like /+\n\n  '11100001100001110': '5',\n  '10100001000100100': '5', //half 5 on left\n  '01001000100001010': '5', //half 5 on right\n\n  '11100001110001110': '6',\n  '10100001010100100': '6', //half 6 on left\n  '01001000100101010': '6', //half 6 on right\n  '00000100100101010': '6', //half 6 with diagonal line\n  '00100001010100100': '6', //half 6 on left without top bar\n  '00001000100101010': '6', //half 6 on right without top bar\n\n  '11000010000001000': '7',\n  '11000100001000000': '7', // ⧶\n  '11000101101000000': '7', // handwriting 7 with bar ヌ\n  '11100010000001000': '7', // 7 with serif at the beginning\n  '10001000000100000': '7', // half 7 on left\n  '10001001100100000': '7', // half 7 on left with bar\n  '01000010000001000': '7', // half 7 on right\n  '10101000000100000': '7', // half 7 on left with serif at the beginning\n  '01001010000001000': '7', // half 7 on right with serif at the beginning\n  '10001000000000000': '7', // quarter 7 on upper left\n  '01000010000000000': '7', // quarter 7 on upper right\n  '00000001000100000': '7', // quarter 7 on lower left\n  '00000000100001000': '7', // quarter 7 on lower right\n  '01000100000000000': '7', // small ⧶ on upper right\n  '00000001001000000': '7', // small ⧶ on lower left\n\n  '11100011110001110': '8',\n  '11010100001010110': '8', // ⧖\n  '10101001010100100': '8', // half 8 on left\n  '01001010100101010': '8', // half 8 on right\n\n  '11100011100001110': '9',\n  '11100011100001000': '9', // 9 without tail\n  '10101001000100100': '9', // half 9 on left\n  '01001010100001010': '9', // half 9 on right\n  '10101001000100000': '9', // half 9 on left without tail\n  '01001010100001000': '9', // half 9 on right without tail\n  '10101001001000000': '9', // half 9 on left with diagonal line\n\n  '00000000000000001': '.',\n\n  '00001001100100000': '+',\n\n  '00000001100000000': '-',\n  '00000001000000000': '-', // small - on center left\n  '00000000100000000': '-', // small - on center right\n\n  '00010100001010000': '*', // X\n  '00001001101010000': '*', // asterisk (5 petals)\n  '00010101101010000': '*', // ⦒⦑\n\n  '00000100001000000': '/',\n  '00000100000000000': '/', // divide on top right\n  '00000000001000000': '/', // divide on bottom left\n\n  '00000100000010000': '(',\n  '00010000001000000': ')',\n\n  // '00000110101001000': 'A', // Avengers' A\n  // '11100011110001000': 'A', // fat\n  // '11000011110001110': 'a', // flipped 6\n  '11001000000100110': 'I',\n  '11100011110000000': 'P',\n\n  '00000000000000000': '',\n\n  // command code:\n  '11000000000000110': '=',\n  '11000001100000000': '=', // half = on top\n  '00000001100000110': '=', // half = on bottom\n  '10000001000000000': '=', // quarter = on upper left\n  '01000000100000000': '=', // quarter = on upper right\n  '00000001000000100': '=', // quarter = on lower left\n  '00000000100000010': '=', // quarter = on lower right\n  '00011101101110000': '🆑'\n};\n\nconst getMappingCharToCodeList = () => {\n  const reversedMapping: { [char: string]: string[] } = {};\n  Object.keys(MAPPING_CODE_TO_CHAR).forEach(code => {\n    const char = MAPPING_CODE_TO_CHAR[code];\n    if (typeof reversedMapping[char] === 'undefined') {\n      reversedMapping[char] = [code];\n    } else {\n      reversedMapping[char].push(code);\n    }\n  });\n  return reversedMapping;\n};\n\nexport const MAPPING_CHAR_TO_CODE_LIST = getMappingCharToCodeList();\n\nexport const SVG_ELEMENTS = [\n  { tag: 'path', d: 'M138.74 0v11.602L123.255 27h-79.64L30.909 13.5 44.56 0z' },\n  {\n    tag: 'path',\n    d: 'M145.908 0v11.602L161.393 27h79.64l12.707-13.5L240.088 0z'\n  },\n  {\n    tag: 'path',\n    d:\n      'M26.11 18l12.54 13.184-5.688 162.59L19.497 207 6.962 193.774l5.687-162.59z'\n  },\n  {\n    tag: 'path',\n    d: 'M61.047 33l56.568 113.507L116.024 192h-7.08L44.572 61.987 45.586 33z'\n  },\n  {\n    tag: 'path',\n    d:\n      'M142.11 18l12.54 13.184-5.688 162.59L135.497 207l-12.535-13.226 5.687-162.59z'\n  },\n  {\n    tag: 'path',\n    d: 'M237.586 33l-1.014 28.987L163.103 192h-7.08l1.592-45.493L222.125 33z'\n  },\n  {\n    tag: 'path',\n    d:\n      'M258.11 18l12.54 13.184-5.688 162.59L251.497 207l-12.535-13.226 5.687-162.59z'\n  },\n  {\n    tag: 'path',\n    d: 'M117.633 198l12.708 13.5L116.69 225h-79.64l-12.708-13.5L37.994 198z'\n  },\n  {\n    tag: 'path',\n    d: 'M233.633 198l12.708 13.5L232.69 225h-79.64l-12.708-13.5 13.653-13.5z'\n  },\n  {\n    tag: 'path',\n    d: 'M19.148 217l12.54 13.184L26 392.774 12.536 406 0 392.774l5.688-162.59z'\n  },\n  {\n    tag: 'path',\n    d: 'M33.062 391l1.014-28.987L107.545 232h7.08l-1.592 45.493L48.523 391z'\n  },\n  {\n    tag: 'path',\n    d:\n      'M135.148 217l12.54 13.184L142 392.774 128.536 406 116 392.774l5.688-162.59z'\n  },\n  {\n    tag: 'path',\n    d:\n      'M161.704 232l64.372 130.013L225.062 391h-15.461l-56.568-113.507L154.624 232z'\n  },\n  {\n    tag: 'path',\n    d:\n      'M251.148 217l12.54 13.184L258 392.774 244.536 406 232 392.774l5.688-162.59z'\n  },\n  {\n    tag: 'path',\n    d: 'M125.74 423v-11.602L110.255 396h-79.64l-12.707 13.5L31.56 423z'\n  },\n  {\n    tag: 'path',\n    d: 'M132.908 423v-11.602L148.393 396h79.64l12.707 13.5-13.652 13.5z'\n  },\n  {\n    tag: 'circle',\n    cx: 266.908,\n    cy: 415,\n    r: 16\n  }\n];\n","import {\n  MAPPING_CHAR_TO_CODE,\n  MAPPING_CODE_TO_CHAR\n} from '../components/Digit/constants';\n\n//-------------------\n// code <--> digit\n//-------------------\n\n/**\n * '' --> 00000000000000000\n * @param digit\n */\nexport const getCodeFromDigit = (digit: string): string => {\n  const c = digit.length > 1 ? digit.charAt(0) : digit;\n  return MAPPING_CHAR_TO_CODE[c];\n};\n\n/**\n * 00000000000000000 --> ''\n * @param code\n */\nexport const getDigitFromCode = (code: string): string =>\n  MAPPING_CODE_TO_CHAR[code];\n\n//-------------------\n// strokes <--> code\n//-------------------\n\n/**\n * 00000000000000000 --> [false, false, ..., false]\n * @param code\n */\nexport const getStrokesFromCode = (code: string): boolean[] =>\n  code.split('').map(char => char === '1');\n\n/**\n * [false, false, ..., false] --> 00000000000000000\n * @param strokes\n */\nexport const getCodeFromStrokes = (strokes: boolean[]): string =>\n  strokes.map(stroke => (stroke ? '1' : '0')).join('');\n\nexport const areStrokesValid = (strokes: boolean[]): boolean =>\n  getCodeFromStrokes(strokes) in MAPPING_CODE_TO_CHAR;\n","import { evaluate, format } from 'mathjs';\n\nexport const checkExpression = (expression: string): number | undefined => {\n  try {\n    const value = evaluate(expression);\n    return parseFloat(format(value, 14));\n  } catch {\n    return undefined;\n  }\n};\n\nconst VALID_COMMAND = ['🆑', '='];\n\n/**\n * Parse the expression\n *\n * @param expression\n * @returns if `value` is `undefined`, then the `expression` is invalid.\n */\nexport const parseExpression = (\n  expression: string\n): { value?: number; command?: string } => {\n  // Expression after single command digit removed from the end\n  const cleanExpression = expression.replace(/🆑|=$/g, '');\n  const value = checkExpression(cleanExpression);\n\n  const command = VALID_COMMAND.find(validCommand =>\n    expression.endsWith(validCommand)\n  );\n\n  return {\n    command,\n    value\n  };\n};\n","export const isDev = decodeURI(window.location.search).includes('dev=✔︎');\n","import React, { useState } from 'react';\nimport {\n  isDev,\n  getStrokesFromCode,\n  getCodeFromStrokes,\n  areStrokesValid\n} from '../../utils';\nimport { SVG_ELEMENTS } from './constants';\nimport './index.css';\n\nconst Digit = ({\n  code,\n  setCode\n}: {\n  code: string;\n  setCode?: (code: string) => void;\n}) => {\n  const [strokes, setStrokes] = useState<boolean[]>(\n    getStrokesFromCode(code || '')\n  );\n\n  const getStrokeAt = (index: number): boolean => strokes[index];\n\n  const onClick = (event: any) => {\n    const strokeIndex: number = parseInt(event.target.dataset['stroke'], 10);\n    const newStroke = !getStrokeAt(strokeIndex);\n    const newStrokes = strokes.map((s, i) =>\n      strokeIndex === i ? newStroke : s\n    );\n    setStrokes(newStrokes);\n\n    // up pass the code when valid\n    if (areStrokesValid(newStrokes) && typeof setCode === 'function') {\n      setCode(getCodeFromStrokes(newStrokes));\n    }\n  };\n\n  return (\n    <div className={'digit' + (areStrokesValid(strokes) ? '' : ' invalid')}>\n      {isDev && <code className=\"code\">{getCodeFromStrokes(strokes)}</code>}\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 283 431\">\n        <g fillRule=\"evenodd\">\n          {SVG_ELEMENTS.map((elem, index) => {\n            const { tag, ...attrs } = elem;\n            const status = getStrokeAt(index);\n            const props = {\n              ...attrs,\n              onClick,\n              key: String(status) + index,\n              className: status ? 'on' : '',\n              'data-stroke': index\n            };\n            return tag === 'path' ? (\n              <path {...props} />\n            ) : tag === 'circle' ? (\n              <circle {...props} />\n            ) : null;\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default Digit;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Digit from '../Digit';\nimport {\n  getCodeFromDigit,\n  getDigitFromCode,\n  parseExpression\n} from '../../utils';\nimport './index.css';\n\nconst getInitDigits = (value: number) =>\n  String(isNaN(value) ? '' : value)\n    .split('')\n    .concat(Array(100).fill(''));\n\nconst getInitialCodes = (value: number) =>\n  getInitDigits(value).map(getCodeFromDigit);\n\nconst Display = ({\n  answerValue,\n  setExpression\n}: {\n  answerValue: number;\n  setExpression: (expression: string) => void;\n}) => {\n  const [codes, setCodes] = useState<string[]>(getInitialCodes(answerValue));\n  const ref = useRef<HTMLDivElement>(null);\n\n  const setCodeAt = (newCode: string, index: number) => {\n    const newCodes = codes.map((code, i) => (index === i ? newCode : code));\n    setCodes(newCodes);\n\n    // up pass the expression when valid\n    const expression = newCodes.map(getDigitFromCode).join('');\n    if (typeof parseExpression(expression).value === 'number') {\n      setExpression(expression);\n    }\n  };\n\n  // triggered when value is changed AKA displaying the calculated result\n  useEffect(() => {\n    setCodes(getInitialCodes(answerValue));\n\n    if (ref.current) {\n      ref.current.scrollLeft = 0;\n    }\n  }, [answerValue]);\n\n  return (\n    <div className=\"display\" ref={ref}>\n      {codes.map((code, index) => {\n        const setCode = (newCode: string) => {\n          setCodeAt(newCode, index);\n        };\n        return <Digit key={code + '@' + index} code={code} setCode={setCode} />;\n      })}\n    </div>\n  );\n};\n\nexport default Display;\n","import React from 'react';\nimport Digit from '../Digit';\nimport { MAPPING_CHAR_TO_CODE_LIST } from '../Digit/constants';\nimport './index.css';\n\nexport const Legend = () => (\n  <div className=\"legend\">\n    <ul>\n      {Object.keys(MAPPING_CHAR_TO_CODE_LIST).map(char => (\n        <li key={char} className=\"legend-char-section\">\n          <h3>\n            <kbd>{char || '(Empty)'}</kbd>\n          </h3>\n          <ul className=\"legend-code-list\">\n            {MAPPING_CHAR_TO_CODE_LIST[char].map(code => (\n              <li key={code}>\n                <Digit code={code} />\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default Legend;\n","import React from 'react';\nimport Legend from '../Legend';\nimport './index.css';\n\nconst Help = () => {\n  return (\n    <div className=\"help\">\n      <p>\n        A calculator <br />\n        without a numpad <br />\n        is like <br />\n        a telephone <br />\n        without a dial.\n      </p>\n      <Legend />\n    </div>\n  );\n};\n\nexport default Help;\n","import React, { useState, useRef } from 'react';\nimport Display from '../Display';\nimport Help from '../Help';\nimport { parseExpression } from '../../utils';\nimport './index.css';\n\nconst initValue = NaN;\nconst Calculator: React.FC = () => {\n  const [answer, setAnswer] = useState(initValue);\n  const [key, setKey] = useState(0);\n  const [isShowingHelp, setIsShowingHelp] = useState(false);\n  const answerRef = useRef(initValue);\n\n  const setExpression = (expression: string) => {\n    const { command, value: newAnswer } = parseExpression(expression);\n    if (typeof newAnswer === 'number') {\n      answerRef.current = newAnswer; // don't set state yet\n      console.log('Answer:', newAnswer);\n\n      // execute command\n      if (command === '=') {\n        displayAnswer();\n      } else if (command === '🆑') {\n        clear();\n      }\n    } else {\n      console.error('Invalid expression:', expression);\n    }\n  };\n\n  const displayAnswer = () => {\n    setAnswer(answerRef.current);\n  };\n\n  const clear = () => {\n    answerRef.current = initValue;\n    console.log('Clear');\n    displayAnswer();\n    setKey(Date.now());\n  };\n\n  const showHelp = () => {\n    setIsShowingHelp(true);\n  };\n\n  const hideHelp = () => {\n    setIsShowingHelp(false);\n  };\n\n  return (\n    <div className=\"calculator\">\n      <Display key={key} setExpression={setExpression} answerValue={answer} />\n      <footer>\n        <button onClick={showHelp}></button>\n      </footer>\n      {isShowingHelp && (\n        <div className=\"full-screen\" role=\"button\" onClick={hideHelp}>\n          <Help />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from 'react';\nimport Calculator from './components/Calculator';\nimport './App.css';\n\nconst App: React.FC = () => (\n  <div className=\"app\">\n    <div className=\"container\">\n      <Calculator />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}